import re
from collections import namedtuple

Var = namedtuple('Var', ['name'])
Const = namedtuple('Const', ['name'])
Func = namedtuple('Func', ['name', 'args'])

def parse(s):
    s = s.strip()
    if '(' in s:
        n, rest = s[:s.index('(')], s[s.index('(')+1:-1]
        args = []
        depth = 0; current = []
        for c in rest + ',':
            if c == ',' and depth == 0:
                args.append(''.join(current).strip())
                current = []
            else:
                if c == '(': depth += 1
                elif c == ')': depth -= 1
                current.append(c)
        return Func(n, [parse(a) for a in args])
    if re.fullmatch(r'[a-z][a-z0-9]*', s): return Var(s)
    return Const(s)

def occurs(v, x, s):
    x = subst(x, s)
    if v == x: return True
    if isinstance(x, Func):
        return any(occurs(v, a, s) for a in x.args)
    return False

def subst(t, s):
    while isinstance(t, Var) and t.name in s:
        t = s[t.name]
    if isinstance(t, Func):
        return Func(t.name, [subst(a, s) for a in t.args])
    return t

def unify(t1, t2, s=None):
    if s is None: s = {}
    t1, t2 = subst(t1, s), subst(t2, s)
    if t1 == t2: return s
    if isinstance(t1, Var):
        if occurs(t1, t2, s): return None
        s[t1.name] = t2
        return s
    if isinstance(t2, Var):
        if occurs(t2, t1, s): return None
        s[t2.name] = t1
        return s
    if isinstance(t1, Func) and isinstance(t2, Func):
        if t1.name != t2.name or len(t1.args) != len(t2.args): return None
        for a1, a2 in zip(t1.args, t2.args):
            s = unify(a1, a2, s)
            if s is None: return None
        return s
    if isinstance(t1, Const) and isinstance(t2, Const) and t1.name == t2.name:
        return s
    return None

def to_str(t):
    if isinstance(t, Var) or isinstance(t, Const):
        return t.name
    return f"{t.name}({', '.join(to_str(a) for a in t.args)})"

def show_subs(s):
    if s is None:
        print("Unification failed.")
    elif not s:
        print("No substitution needed.")
    else:
        for k,v in s.items():
            print(f"{k} = {to_str(v)}")
print("Name:Umesha H N\nUSN:1BM24CS428\n\n")
tests = [
    ("p(b,X,f(g(Z)))", "p(z,f(Y),f(Y))"),
    ("Q(a,g(x,a),f(y))", "Q(a,g(f(b),a),x)"),
    ("p(f(a),g(Y))", "p(X,X)"),
    ("prime(11)", "prime(y)"),
    ("knows(John,x)", "knows(y,mother(y))"),
    ("knows(John,x)", "knows(y,Bill)")
]

for e1, e2 in tests:
    print(f"Unifying: {e1} and {e2}")
    s = unify(parse(e1), parse(e2))
    show_subs(s)
    print('-'*40)
