
import random
import math

def calculate_conflicts(board):
    conflicts = 0
    n = len(board)
    for i in range(n):
        for j in range(i + 1, n):
            if board[i] == board[j] or abs(board[i] - board[j]) == j - i:
                conflicts += 1
    return conflicts

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ['Q' if col == board[row] else '.' for col in range(n)]
        print(' '.join(line))
    print()

def simulated_annealing(n=8, max_iter=10000, initial_temp=100, cooling_rate=0.95):
    current_state = [random.randint(0, n - 1) for _ in range(n)]
    current_conflicts = calculate_conflicts(current_state)
    temperature = initial_temp
    iteration = 0

    while current_conflicts > 0 and iteration < max_iter and temperature > 0.1:
        iteration += 1
        neighbor = current_state[:]
        row = random.randint(0, n - 1)
        new_col = random.randint(0, n - 1)
        while new_col == neighbor[row]:
            new_col = random.randint(0, n - 1)
        neighbor[row] = new_col

        neighbor_conflicts = calculate_conflicts(neighbor)
        delta = neighbor_conflicts - current_conflicts

        if delta < 0 or random.uniform(0, 1) < math.exp(-delta / temperature):
            current_state = neighbor
            current_conflicts = neighbor_conflicts

        temperature *= cooling_rate

    return current_state, current_conflicts

solution, conflicts = simulated_annealing(n=8)
print("Final board with conflicts =", conflicts)
print("Name:Umesha H N\nUSN:1BM24CS428\n")
print_board(solution)

if conflicts == 0:
    print("Solution found!")
else:
    print("Failed to find a solution.")
